#!/usr/bin/python3

import sys
import argparse
import os
import os.path

from DarkNews.GenLauncher import GenLauncher
# obtain default values
DEFAULTS = GenLauncher()

def detectors_list(extension=".json"):
    root_path = os.path.split(os.path.dirname(os.path.realpath( __file__ )))[0]
    detectors_path = os.path.join(root_path, "src", "DarkNews", "detectors")
    file_list = filter(lambda item: item.endswith(extension), os.listdir(detectors_path))
    return list(map(lambda item: item.rstrip(".json"), file_list))
    

'''
    Default options
    
        Default case implements the 3+2 model of 
            Ballett et al, Phys. Rev. D 101, 115025 (2020) (https://arxiv.org/abs/1903.07589)
    
'''

# --------------
# User specified
# particle masses
# use default=argparse.SUPPRESS so no defaults attributes are instantiated in the final Namespace
parser = argparse.ArgumentParser(description="Generate dark nu events", formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)

##### file containing the parameters
parser.add_argument("--param-file", type=str, help="file containing parameters definitions")

##### dark sector spectrum
parser.add_argument("--mzprime", type=float, help="Z' mass", default=DEFAULTS.mzprime)
parser.add_argument("--m4", type=float, help="mass of the fourth neutrino", default=DEFAULTS.m4)
parser.add_argument("--m5", type=float, help="mass of the fifth neutrino", default=DEFAULTS.m5)
parser.add_argument("--m6", type=float, help="mass of the sixth neutrino", default=DEFAULTS.m6)

parser.add_argument("--D_or_M", help="D_or_M: dirac or majorana", choices=["dirac", "majorana"], default=DEFAULTS.D_or_M)

# neutral lepton mixing
parser.add_argument("--ue4", type=float, help="Ue4", default=DEFAULTS.ue4)
parser.add_argument("--ue5", type=float, help="Ue5", default=DEFAULTS.ue5)
parser.add_argument("--ue6", type=float, help="Ue6", default=DEFAULTS.ue6)

parser.add_argument("--umu4", type=float, help="Umu4", default=DEFAULTS.umu4)
parser.add_argument("--umu5", type=float, help="Umu5", default=DEFAULTS.umu5)
parser.add_argument("--umu6", type=float, help="Umu6", default=DEFAULTS.umu6)

parser.add_argument("--utau4", type=float, help="Utau4", default=DEFAULTS.utau4)
parser.add_argument("--utau5", type=float, help="Utau5", default=DEFAULTS.utau5)
parser.add_argument("--utau6", type=float, help="Utau6", default=DEFAULTS.utau6)

parser.add_argument("--ud4", type=float, help="UD4", default=DEFAULTS.ud4)
parser.add_argument("--ud5", type=float, help="UD5", default=DEFAULTS.ud5)
parser.add_argument("--ud6", type=float, help="UD6", default=DEFAULTS.ud6)

# dark coupling choices
parser.add_argument("--gD", type=float, help="U(1)_d dark coupling", default=DEFAULTS.gD)
parser.add_argument("--alphaD", type=float, help="U(1)_d  alpha_dark = (g_dark^2 /4 pi)")

# kinetic mixing options
parser.add_argument("--epsilon", type=float, help="epsilon^2", default=DEFAULTS.epsilon)
parser.add_argument("--epsilon2", type=float, help="epsilon^2")
parser.add_argument("--alpha_epsilon2", type=float, help="alpha_QED*epsilon^2")
parser.add_argument("--chi", type=float, help="chi")

# TMM in GeV^-1
parser.add_argument("--mu_tr_e4", type=float, help="TMM mu_tr_e4", default=DEFAULTS.mu_tr_e4)
parser.add_argument("--mu_tr_e5", type=float, help="TMM mu_tr_e5", default=DEFAULTS.mu_tr_e5)
parser.add_argument("--mu_tr_e6", type=float, help="TMM mu_tr_e6", default=DEFAULTS.mu_tr_e6)

parser.add_argument("--mu_tr_mu4", type=float, help="TMM mu_tr_mu4", default=DEFAULTS.mu_tr_mu4)
parser.add_argument("--mu_tr_mu5", type=float, help="TMM mu_tr_mu5", default=DEFAULTS.mu_tr_mu5)
parser.add_argument("--mu_tr_mu6", type=float, help="TMM mu_tr_mu6", default=DEFAULTS.mu_tr_mu6)

parser.add_argument("--mu_tr_tau4", type=float, help="TMM mu_tr_tau4", default=DEFAULTS.mu_tr_tau4)
parser.add_argument("--mu_tr_tau5", type=float, help="TMM mu_tr_tau5", default=DEFAULTS.mu_tr_tau5)
parser.add_argument("--mu_tr_tau6", type=float, help="TMM mu_tr_tau6", default=DEFAULTS.mu_tr_tau6)

parser.add_argument("--mu_tr_44", type=float, help="TMM mu_tr_tau4", default=DEFAULTS.mu_tr_44)
parser.add_argument("--mu_tr_45", type=float, help="TMM mu_tr_tau5", default=DEFAULTS.mu_tr_45)
parser.add_argument("--mu_tr_46", type=float, help="TMM mu_tr_tau6", default=DEFAULTS.mu_tr_46)

parser.add_argument("--mu_tr_55", type=float, help="TMM mu_tr_tau5", default=DEFAULTS.mu_tr_55)
parser.add_argument("--mu_tr_56", type=float, help="TMM mu_tr_tau6", default=DEFAULTS.mu_tr_56)

parser.add_argument("--mu_tr_66", type=float, help="TMM mu_tr_tau6", default=DEFAULTS.mu_tr_66)

# visible final states in HNL decay
parser.add_argument("--decay_products", help="decay process of interest", choices=["e+e-","mu+mu-","photon"], default=DEFAULTS.decay_products)

# experiments    
parser.add_argument("--exp", type=str.lower, help="experiment", choices=detectors_list(extension=".json"), default=DEFAULTS.exp)
                                                                
# scattering types
parser.add_argument("--nopelastic", help="do not generate proton elastic events", action="store_true")
parser.add_argument("--nocoh", help="do not generate coherent events", action="store_true")
parser.set_defaults(nopelastic=DEFAULTS.nopelastic)
parser.set_defaults(nocoh=DEFAULTS.nocoh)

parser.add_argument("--noHC", help="do not include helicity conserving events", action="store_true")
parser.add_argument("--noHF", help="do not include helicity flipping events", action="store_true")
parser.set_defaults(noHC=DEFAULTS.noHC)
parser.set_defaults(noHF=DEFAULTS.noHF)


###########
# run related arguments
parser.add_argument("--log", help="Logging level", default=DEFAULTS.log)
parser.add_argument("--verbose", help="Verbose for logging", action="store_true")
parser.set_defaults(verbose=DEFAULTS.verbose)
parser.add_argument("--logfile", help="Path to logfile. If not set, use std output.", default=DEFAULTS.logfile)

# Vegas parameters 
parser.add_argument("--neval", type=int, help="number of evaluations of integrand", default=DEFAULTS.neval)
parser.add_argument("--nint", type=int, help="number of adaptive iterations", default=DEFAULTS.nint)
parser.add_argument("--neval_warmup", type=int, help="number of evaluations of integrand in warmup", default=DEFAULTS.neval_warmup)
parser.add_argument("--nint_warmup", type=int, help="number of adaptive iterations in warmup", default=DEFAULTS.nint_warmup)

# program options
parser.add_argument("--pandas", help="If true, prints events in .npy files", action="store_true")
parser.set_defaults(pandas=DEFAULTS.pandas)
parser.add_argument("--numpy", help="If true, prints events in .npy files", action="store_true")
parser.set_defaults(numpy=DEFAULTS.numpy)
parser.add_argument("--hepevt", help="If true, unweigh events and print them in HEPEVT-formatted text files", action="store_true")
parser.set_defaults(hepevt=DEFAULTS.hepevt)    
parser.add_argument("--hepevt_unweigh", help="unweigh events when printing in HEPEVT format (needs large statistics)", action="store_true")
parser.set_defaults(hepevt_unweigh=DEFAULTS.hepevt_unweigh)
parser.add_argument("--hepevt_events", type=int, help="number of events to accept in HEPEVT format", default=DEFAULTS.hepevt_events)

parser.add_argument("--summary_plots", help="generate summary plots of kinematics", action="store_false")
parser.set_defaults(summary_plots=DEFAULTS.summary_plots)
parser.add_argument("--path", help="path where to save run's outputs", default=DEFAULTS.path)

args = parser.parse_args()

gen_object = GenLauncher(**vars(args))
gen_object.run(log=args.log, verbose=args.verbose, logfile=args.logfile)
